Blog Application
------------------------------
	1. APIs required to create a blog application
		--------------------------------------------------

		-> Blog Application :  Web Platform to create, delete, update and read blogs.
							
		-> Contains two types of users : 
				1. Author -> Create, Update, Delete, Publish and Unpublish the blogs.
							-----------------------------------------------------------
								-> Authors can log in and create categories on the platform
								-> Author can Publish / Unpublish the blog under the categories

				2. Viewer -> Read, Like, Comment and Subscribe the Blogs of Authors.
							--------------------------------------------------------
								-> In Order to like and Comment, the Viewer needs to log in first.

		->  Posts can have :
			-----------------
				-> Banner Image, Title and content


	--------------------------------------------------------------------------------------------------------------------
	2. APIs for Blog Application
		---------------------------------------------
		1. User Authentication
			--------------------
				-> Two types of Users Based on roles
					1. Author
					2. Viewer

			----------------------------------------------------------------------------------------------------------------------------------------------------
				1. Register			-> POST  api/auth/register
					------------------------------------------------------
						-> API to SignUp / Register on the Blog Application
						-> It will take basic details such as : 
								* name
								* username	(Must be Unique)
								* email		(Must be Unique)
								* password	(Must contain lowercase, uppercase, special character, number and must be >= 8 digits)
								* role (Author / Viewer)

						-> Request Format
								* Request format will be json
									{
										"name": "My Name",
										"username": "my_username",
										"email": "my@email.com",
										"password": "my_password",
										"role": "Author"
									}

						-> Response Format
								* Can return in two ways :
									-> Simple Message stating : "Sign up successfull" and redirect to Login Page or Profile Page
									-> Return the Details of the User registered
										{
											"message": "Sign Up Successfull....",
											"user" : {
												"name": "My Name",
												"username": "my_username",
												"email": "my@email.com",
												"role": "Author"
											},
											"token": "jwt_token"
										}

			-----------------------------------------------------------------------------------------------------------------------------------------------------------
				2. LogIn			-> POST  api/auth/login
					-----------------------------------------------------
						-> API to LogIn to the account 
						-> It will take email and password for logging in the account

						-> Request Format
								* Request format will be Json
									{
										"email": "my@email.com",
										"password": "my_password"
									}
						-> Response Format
								* Will return User details (and can be redirected to Homepage where all posts are available)
									{
											"message": "Sign In Successfull....",
											"token": "jwt_token"
										}

			-----------------------------------------------------------------------------------------------------------------------------------------------------------
				3. Profile			-> GET  api/users/:id
					----------------------------------------------------
						-> API to get Profile by Id of User
						-> API to see the Profile where User can see its details and option to update and delete the profile
						
						-> Will be secured path which "can only be accessed if user is Logged in" and without login it cannot be accessed

						-> Response Format
							* It will respond with details of user whose id will be passed
								{
									"name": "My Name",
									"username": "my_username",
									"email": "my@email.com",..
									"role": "Author"
								}

			----------------------------------------------------------------------------------------------------------------------------------------------------------

				4. Update Profile	-> PUT  api/users/:id/
					----------------------------------------------------
						-> API to update the User Details
						-> It will take the field that you want to update in the User (Except for fields that you want to keep constant and no changes should be done to those)
						-> role will not be available to update (or we can give this functionality to admin if we want to change the role)

						-> Request Format
							* Request will be in JSON Format
								{
									"field1": "value1",
									"field2": "value2"
								}

						-> Response Format
							* Response can be in different ways :
								-> Message displaying "Details Updated Successfully" and redirecting to the profile page
								-> Giving the updated User details

			-----------------------------------------------------------------------------------------------------------------------------------------------------------		
				5. Delete Profile	-> DELETE  api/users/:id
					----------------------------------------------------
						-> API to Delete the User
						-> This will also be applicable only when the user is logged in (backend logic to verify if currentuser is the user that is being deleted)

						-> Response Format
							-> CAn display message stating User is Deleted or give the deleted user details as response

	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


		2. APIs for Author
			----------------------
				1. Create Category								-> POST  api/categories
					-------------------------------------------------------------------------------
						-> API to create category in the Blog Application
						-> It will first verify that user creating category is "Author" or "Viewer" and allow creating category only if role is "Author"
						-> It will take Category name as Request

						-> Request Format
							* Request Format will be json
								{
									"category_name": "Fashion"
								}

						-> Response Format
							* Response will be Category Object and Message Stating Category is Created

			--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				2. Delete Category								-> DELETE  api/categories/:id
					---------------------------------------------------------------------------------------
						-> API to get Category by ID and delete the Category.

			---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				3. Get All Blogs under a Specific Category		-> GET  api/categories/:id/blogs
					---------------------------------------------------------------------------------------
						-> API endpoint to get all the blog posts that falls under a specific category.

						-> Response Format
							* It will give all the blog posts that are published and belongs to the specified category in json Format
								[
									{
										"title": "my_blog_title1",
										"content": "my_blog_content1",
										"banner_image": "image_url_path1"
									},
									{
										"title": "my_blog_title2",
										"content": "my_blog_content2",
										"banner_image": "image_url_path2"
									},
									{
										"title": "my_blog_title3",
										"content": "my_blog_content3",
										"banner_image": "image_url_path3"
									}
								]


			--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				4. Create Blog Post								-> POST  api/categories/:id/blogs
					---------------------------------------------------------------------------------------
						-> API to create a Blog Post under the specified category
						-> Only the Author will have accessibility to create a blog under any category

						-> Details like Title, Content, banner_image will we required to create a post

						-> Request Format
							* Request to create a post will be in json format
								{
									"title": "my_blog_title",
									"content": "my_blog_content",
									"banner_image": "image_url_path"
								}

						-> Response Format
							* Response will be the Post object along with a message stating "Post has been Created"

			----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				5. Get Blog Post									-> GET  api/blogs/:id
					-------------------------------------------------------------------------------------
						-> API endpoint to get the Post details
						-> This will enable to get the particular blog

						-> Response Format
							* Response Format will be in json
								{
									"title": "updatd_title",
									"content": "updated_content",
									"banner_image": "updated_image_url_path"
								}

			----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				6. Edit Blog Post									-> PUT  api/blogs/:id
					-------------------------------------------------------------------------------------
						-> API endpoint to Edit the Post details
						-> This will enable to make some changes in the blog post

						-> Request Format
							* Request Format will be in json
								{
									"title": "updatd_title",
									"content": "updated_content",
									"banner_image": "updated_image_url_path"
								}

						-> Response Format
							* Response Format will be the Edited Post Object along with a Message stating Post Has been Edited

			----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				7. Delete Blog Post									-> DELETE  api/blogs/:id
					--------------------------------------------------------------------------------------
						-> API endpoint to delete the Blog Post
						-> it will Simply delete the blog post associated with that blog_id

						-> Response Format
							* Will return the deleted blog post Message stating Blog Post deleted successfully if needed!!!

			----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				8. Publish Blog Post								-> PATCH api/blogs/:id/publish
					----------------------------------------------------------------------------------------
						-> API endpoint to Publish or Unpublish the Post
						-> If the post is Unpublished than by hitting this endpoint will make it published 

						-> Request Format
							* The Request Format will be in json
								{
									"is_published": true 
								}

						-> Response Format
							* Response will be updated Blog Post Along with message staating whether Blog Post is Published or not!!!

			-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				9. Unpublish Blog Post								-> PATCH api/blogs/:id/unpublish
					--------------------------------------------------------------------------------------------
						-> API endpoint to Unpublish the Post
						-> If the post is published than by hitting this endpoint will make it unpublished

						-> Request Format
							* The Request Format will be in json
								{
									"is_published": false 
								}

						-> Response Format
							* Response will be updated Blog Post Along with message staating whether Blog Post is Published or not!!!

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

		3. APIs for Viewers
			---------------------------------
				1. Get All Published Blog Posts						-> GET  api/blogs
					---------------------------------------------------------------------
						-> API endpoint to display all the blogs that are published by authors
						-> This endpoint will provide all the posts that are published by all authors.

						-> It will check for blogs having is_published = true for fetching those posts

						-> Response Format
							* Response for this request will be an array of blog objects in json format
								[
									{
										"title": "my_blog_title1",
										"content": "my_blog_content1",
										"banner_image": "image_url_path1"
									},
									{
										"title": "my_blog_title2",
										"content": "my_blog_content2",
										"banner_image": "image_url_path2"
									},
									{
										"title": "my_blog_title3",
										"content": "my_blog_content3",
										"banner_image": "image_url_path3"
									}
								]

			------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				2. Like Blog Post									-> PATCH  api/blogs/:id/like
					--------------------------------------------------------------------------------
						-> API endpoint to like a blog Post
						-> It will basically add the current user's id to the like array of blog post which contains the users who have liked the blog post

						-> Request Format
							* It will send the userId of the current user in json format
								{
									"userId": currentUserId
								}

						-> Then if it has not already liked then it will add this userId into the like array of blog post

						-> Response Format
							* Message stating that Liked the Post

			--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				3. Unlike Blog Post									-> PATCH  api/blogs/:id/unlike
					----------------------------------------------------------------------------------
						-> API endpoint to unlike a blog Post
						-> It will basically remove the current user's id from the like array of blog post which contains the users who have liked the blog post

						-> Request Format
							* It will send the userId of the current user in json format
								{
									"userId": currentUserId
								}

						-> Then if it has been already liked then it will remove this userId from the like array of blog post

						-> Response Format
							* Message stating that successfully uniked the Post

			---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				4. Comment on Blog Post								-> POST  api/blogs/:id/comment
					--------------------------------------------------------------------------------------
						-> API endpoint to post a comment on the Blog Post
						-> It will basically take the comment of Viewer and add it to the Array of Comments Object

						-> Request Format
							* It will take comment in json format as request
								{
									"userId": currentUserId,
									"username": "current user's username",
									"comment": "Comment Of the User"
								}

						-> Response Format
							* It will return the Comment object as the response.
							* Also a message can be displayed alongside stating that Comment has been posted

			----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				5. Get all the comments on a Blog Post				-> GET  api/blogs/:blogId/comments
					----------------------------------------------------------------------------------------
						-> API endpoint to retrieve all the comments for a specific Blog Post
						-> It will give an arrays of comments that are associated with particular Blog Post

						-> Response Format
							* A Array of comment objects in json format
								[
									{
										"id": comment_id,
										"username": "name of the user that commented"
										"comment": "comment_text"
									},
									{
										"id": another_id,
										"username": "name of another user",
										"comment": "another comment"
									}
								]
			----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				5. Delete the Comment on the Blog Post				-> DELETE  api/blogs/:blogId/comments/:commentId
					--------------------------------------------------------------------------------------------------
						-> API endpoint to delete a comment from the Blog Post
						-> It will basically find the comment by Id and then remove it from the comments array of the Blog Post

						-> Response Format
							* It will return the deleted Comment object
							* Also a message can be displayed stating Comment has been deleted

			---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				6. Subscribing the Author							-> PATCH  api/users/:id/subscribe
					-------------------------------------------------------------------------------------------------
						-> API endpoint to subscibe to an Author
						-> It will basically add the current user's Id to the subscibers Array of Author if it doesn't already exists 

						-> Request Format
							* In request we will send current User's user_id in json format
								{
									"userId": currentUserId
								}

						-> Response Format
							* Current User Object along with message stating Subscribed Successfully

			-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				7. Un-Subscribing the Author						-> PATCH  api/users/:id/unsubscribe
					-------------------------------------------------------------------------------------------------
						-> API endpoint to unsubscibe to an Author
						-> It will basically remove the current user's Id from the subscibers Array of Author if it already exists 

						-> Request Format
							* In request we will send current User's user_id in json format
								{
									"userId": currentUserId
								}

						-> Response Format
							* Current User Object along with message stating Un-Subscribed Successfully

			-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------